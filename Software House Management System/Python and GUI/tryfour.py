#  /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 24, 2022 08:49:42 PM PKT  platform: Windows NT

from PIL import ImageTk, Image, ImageDraw
from datetime import *
import time
from math import *
import random

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

import tkinter as tk
from tkinter import *
import tkinter.ttk as ttk
import customtkinter as ck
from customtkinter import *
from PIL import Image,ImageTk
import PIL as pl

import mysql.connector as sqlc


mydb1=sqlc.connect(host="localhost",user="root",passwd="p;k;a;d;",database="tt2")
cur2=mydb1.cursor()

set_appearance_mode("dark")
import functions as ff
import manage as mm
import view as vv

_script = sys.argv[0]
_location = os.path.dirname(_script)


_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 
scaling_var="100%"
class Toplevel1:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1536x793+-8+-8")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top


        # dmi=ImageTk.PhotoImage(file="techimg2.jpg")
        # dmii=ImageTk.PhotoImage(file="techimg3.jfif")image=dmii,
        # dmi=PhotoImage
        self.bglabel=CTkLabel(self.top,text="Welcome to the Dashboard", font=("Broadway", 35))
        self.bglabel.place(x=230 ,y=10, height=50, width=900)
        
        ##########################################
        ############# Right Frame################
        ##########################################
        self.rightframe = ck.CTkFrame(self.top)
        self.rightframe.place(relx=0.001, rely=0.082, relheight=0.914
                , relwidth=0.192)
        ############# right subframe upper
        self.rightupperframe = ck.CTkFrame(self.rightframe)
        self.rightupperframe.place(relx=0.0, rely=0.014, relheight=0.273, relwidth=0.966)
        
        ############# right subframe lower
        self.rightlowerframe = ck.CTkFrame(self.rightframe)
        self.rightlowerframe.place(relx=0.0, rely=0.29, relheight=0.702, relwidth=0.966)

        # adm=tk.PhotoImage(file="D:\\1. shms\\New Design\\New\images\\add_admin.png",background='transparent')





        # pilimg=Image.open("D:\\1. shms\\New Design\\New\images\\add_admin.png")
        adm=tk.PhotoImage(file="D:\\1. shms\\New Design\\New\images\\1admin3.png",format='png').subsample(2,2)
        self.sign_in_image = Image.open('D:\Py\Tkinter Login Page\Tkinter Login Page\images\\hyy.png')
        photo = ImageTk.PhotoImage(self.sign_in_image)
        self.sign_in_image_label = CTkLabel(self.rightupperframe, image=photo,text="")
        self.sign_in_image_label.image = photo
        self.sign_in_image_label.place(x=80, y=30)
        # adm=tk.PhotoImage(file="D:\\1. shms\\New Design\\New\images\\add_admin.png",background='transparent')

        # self.admin_label1=CTkLabel(self.rightupperframe,image=adm,text="")
        # self.admin_label1.place(x=80 ,y=0)

        self.admin_label2=CTkLabel(self.rightupperframe,text='Admin',font=("Elephant",25))
        self.admin_label2.place(x=95 ,y=115)

        
        self.admin_label2=CTkLabel(self.rightupperframe,text='â€¢ Online',font=("Arial",25,"bold"),text_color="#00FF00")
        self.admin_label2.place(x=75 ,y=155)

        # ============================Home Button================================

        self.home_button=ck.CTkButton(self.rightlowerframe,text="Home",height=55,width=220, command=self.click_home)
        self.home_button.place(x=27, y=35)


        # ============================Manage Button================================

        self.manage_button=CTkButton(self.rightlowerframe,text="Manage",height=55,width=220,command=lambda:self.click_manage())
        self.manage_button.place(x=27,y=135)
    
        # ============================view Button================================
        self.view_button=CTkButton(self.rightlowerframe,text="View",height=55,width=220,command=self.click_view)
        self.view_button.place(x=27,y=235)

        # ============================setting Button================================
        self.setting_button=CTkButton(self.rightlowerframe,text="Setting",height=55,width=220,command=self.click_setting)
        self.setting_button.place(x=27,y=335)

        # ============================Exit Button================================
        self.exit_button=CTkButton(self.rightlowerframe,text="Exit",height=55,width=220, command=lambda: self.finish(self.top))#,command=self.click_manage)
        self.exit_button.place(x=27,y=435)





        ##########################################
        ############# Left Frame ################
        ##########################################
        self.leftframe = ck.CTkFrame(self.top)
        self.leftframe.place(relx=0.785, rely=0.0, relheight=0.996, relwidth=0.212)

        ############left frame buttons

        # self.labelabove=ck.CTkLabel(self.leftframe,text="Choose the sidebar values", font=("Arial",23,'bold'))
        # self.labelabove.place(x=20,y=30)

        # self.Button1 = ck.CTkButton(self.leftframe)
        # # self.Button1.place(x=30, y=80, height=35, width=150)

        # # self.Button1.place(relx=0.061, rely=0.089, height=24, width=127)
        # self.Button1.configure(text='''Notifications''')

        # self.Button2 = ck.CTkButton(self.leftframe)
        # self.Button2.place(x=180, y=80, height=35, width=150)
        # self.Button2.configure(text='''Progress''')
        # self.seg_button_1 = ck.CTkSegmentedButton(self.leftframe,height=50)
        # self.seg_button_1.configure(values=["            Notifications            ", "           Progress           "])
        # self.seg_button_1.set("            Notifications            ")
        # self.seg_button_1.place(x=17,y=75)

        self.leftframelower = ck.CTkFrame(self.leftframe)
        self.leftframelower.place(relx=0.031, rely=0.558, relheight=0.509, relwidth=0.945)

        self.leftframeupper= ck.CTkFrame(self.leftframe)
        self.leftframeupper.place(relx=0.031, y=20, relheight=0.38
                , relwidth=0.948)

        self.sty=ttk.Style()
        self.sty.configure("TSeparator",background='blue',height=100)
        self.leftframesep0=ttk.Separator(self.top,orient='vertical',style='TSeparator')
        self.leftframesep0.place(relx=0.7831,rely=0,relheight=1)
        
        self.leftframesep1=ttk.Separator(self.top,orient='vertical',style='TSeparator')
        self.leftframesep1.place(relx=0.7840,rely=0,relheight=1)

        self.leftframesep1=ttk.Separator(self.top,orient='vertical',style='TSeparator')
        self.leftframesep1.place(relx=0.7849,rely=0,relheight=1)


        #######################################################
        ################# right lower frame fit #######################
        ########################################################



        self.clock(self.leftframeupper)
        self.lf_tab=CTkTabview(self.leftframe)
        self.lf_tab.add("Progress")
        self.lf_tab.add("Notifications")
        # self.showsidebars(self.lf_tab.tab("Notifications"))

        self.lf_tab.place(x=11,y=320, height=900, width=382)


        cur2.execute("select percentagecompleted from project where projectid='prj1'")
        for i in cur2:
            self.j=i[0]
        color_arr=['red', 'blue', 'green']
        
        self.labb1=CTkLabel(self.lf_tab.tab("Progress"),text=f"Project1 completion: {self.j}%")
        self.labb1.pack(pady=15)
        self.bb=CTkProgressBar(self.lf_tab.tab("Progress"),progress_color=vv.colss(color_arr,self.j),height=25)
        self.bb.set(self.j/100)
        self.bb.pack(pady=1)
        
        cur2.execute("select percentagecompleted from project where projectid='prj2'")
        for i in cur2:
            self.j=i[0]
        self.labb2=CTkLabel(self.lf_tab.tab("Progress"),text=f"Project2 completion: {self.j}%")
        self.labb2.pack(pady=15)
        self.bb2=CTkProgressBar(self.lf_tab.tab("Progress"),progress_color=vv.colss(color_arr,self.j),height=25)
        self.bb2.set(self.j/100)
        self.bb2.pack(pady=1)
        
        cur2.execute("select percentagecompleted from project where projectid='prj3'")
        for i in cur2:
            self.j=i[0]
        self.labb3=CTkLabel(self.lf_tab.tab("Progress"),text=f"Project3 completion: {self.j}%")
        self.labb3.pack(pady=15)
        self.bb3=CTkProgressBar(self.lf_tab.tab("Progress"), progress_color=vv.colss(color_arr,self.j), height=25)
        self.bb3.set(self.j/100)
        self.bb3.pack(pady=1)
        
        cur2.execute("select percentagecompleted from project where projectid='prj4'")
        for i in cur2:
            self.j=i[0]
        self.labb3=CTkLabel(self.lf_tab.tab("Progress"),text=f"Project4 completion: {self.j}%")
        self.labb3.pack(pady=15)
        self.bb3=CTkProgressBar(self.lf_tab.tab("Progress"), progress_color=vv.colss(color_arr,self.j), height=25)
        self.bb3.set(self.j/100)
        self.bb3.pack(pady=1)
        
        #######################################################
        ################# Frame #######################
        ########################################################

        self.center_frame = ck.CTkFrame(self.top)
        self.center_frame.place(relx=0.195, rely=0.082, relheight=0.914
                , relwidth=0.588)

        # self.center_frame = ck.CTkFrame(self.center_frame1)
        # self.center_frame.place(relx=0, rely=0, relheight=1
        #         , relwidth=1)



        self.center_upper_frame = ck.CTkFrame(self.center_frame)
        self.center_upper_frame.place(relx=0.016, rely=0.017, relheight=0.121
                , relwidth=0.969)
        # ff.print(self.center_upper_frame)
        # self.center_upper_frame.configure(relief='groove')
        # self.center_upper_frame.configure(borderwidth="2")
        # self.center_upper_frame.configure(relief="groove")
        # self.center_upper_frame.configure(background="#d9d9d9")
        

        self.Label1 = ck.CTkLabel(self.center_upper_frame)
        self.Label1.configure(text='''SEECS Software House''', font=("Algerian", 43, 'bold'))
        self.Label1.place(relx=0.00, rely=0.00, relheight=1, relwidth=1)




        self.clf_create(self.center_frame)
        # self.center_lower_frame.configure(relief='groove')
        # self.center_lower_frame.configure(borderwidth="2")
        # self.center_lower_frame.configure(relief="groove")
        # self.center_lower_frame.configure(background="#d9d9d9")

        # ff.createaddempform(self.center_lower_frame)
        self.click_home()
    def clf_create(self,contt):
        self.center_upper_frame = ck.CTkFrame(self.center_frame)
        self.center_upper_frame.place(relx=0.016, rely=0.017, relheight=0.121
                , relwidth=0.969)


        self.center_lower_frame= ck.CTkFrame(contt)
        self.center_lower_frame.place(x=15, y=125, relheight=0.841
                , relwidth=0.969)
        global center_lower_frame        
        self.Label1 = ck.CTkLabel(self.center_upper_frame)
        self.Label1.configure(text='''SEECS Software House''', font=("Algerian", 43, 'bold'))
        self.Label1.place(relx=0.00, rely=0.00, relheight=1, relwidth=1)




    def click_home(self):
        
        """set to default home tab where details like no. of students, employees, department shows """


        self.cleaner(self.center_frame)
        self.clf_create(self.center_frame)
        
        # dmii=ImageTk.PhotoImage(file="techimg3.jfif")

        ###########################################################
        # ================ Employees Number on home================
        ###########################################################
        homcol='red'
        self.empno_frame=CTkFrame(self.center_lower_frame, border_color='white', border_width=10,width=350)
        self.empno_frame.place(x=50,y=50)
        cur2.execute("select count(*) from employee" )
        self.stu=CTkLabel(self.empno_frame,text=f"\n {(self.inita(cur2))[0]-1}+ \nEmployees",height=15,width=15, font=("Algerian", 32, "bold"),text_color=homcol)
        self.stu.place(x=80,y=30)
        ######################################################
        # ================ Dept Number on home================
        ######################################################
        self.deptno_frame=CTkFrame(self.center_lower_frame, border_color='white', border_width=10,width=350)
        self.deptno_frame.place(x=50,y=350)

        cur2.execute("select count(*) from branch" )

        self.deptno=CTkLabel(self.deptno_frame,text=f" \n {(self.inita(cur2))[0]}\nBranches",height=15,width=15, font=("Algerian", 32, "bold"),text_color=homcol)#font=("yu gothic ui", 35, "bold"),text_color='red')
        self.deptno.place(x=80,y=30)
        #####################################################
        # ================ Internees Number on home================
        ######################################################
        self.interno_frame=CTkFrame(self.center_lower_frame, border_color='white', border_width=10, width=350)
        self.interno_frame.place(x=480,y=50)

        cur2.execute("select count(*) from internee" )


        self.interno=CTkLabel(self.interno_frame,text=f"\n{(self.inita(cur2))[0]-1}+ \nInterns",height=15,width=15, font=("Algerian", 32, "bold"),text_color=homcol)#font=("yu gothic ui", 35, "bold"),text_color='red')
        self.interno.place(x=100,y=30)
        ######################################################
        # ================ Client Number on home================
        ######################################################
        self.clientno_frame=CTkFrame(self.center_lower_frame,border_color='white', border_width=10, width=350)
        self.clientno_frame.place(x=480,y=350)
        # ,image=Imagetk.PhotoImage(file="techimg1.jpg")
        cur2.execute("select count(*) from internee" )


        self.clientno=CTkLabel(self.clientno_frame, text=f"\n{(self.inita(cur2))[0]-1}+\nHappy Clients",height=15,width=15, font=("Algerian", 32, "bold"),text_color=homcol)#font=("yu gothic ui", 35, "bold"),text_color='red')
        self.clientno.place(x=50,y=30)

    def inita(self,dat):
        for i in dat:
            j=i
        return j

    def click_manage(self):
        """set to default home tab where details like no. of students, employees, department shows """
        # manage_frame = CTkFrame(self.top)
        # manage_frame.place(x=210, y=140, height=800, width=1640)

        # self.manage_panel = CTkLabel(manage_frame, text="self.home_dashboard_frame")
        # self.manage_panel.pack( expand='yes')
        
        ff.cleaner(self.center_frame)
        self.clf_create(self.center_frame)
        ######################################################
        # ================ Emp Button on manage================
        ######################################################
        employee_button=CTkButton(self.center_lower_frame,text="Employee",height=100, command=lambda:mm.subclick_manage(self.center_frame,self.center_lower_frame,"Employee"))

        employee_button.place(x=160,y=70)
        ######################################################
        # ================ Intern Button on manage================
        ######################################################
        intern_button=CTkButton(self.center_lower_frame,text="Interns",height=100,command=lambda:mm.subclick_manage(self.center_frame,self.center_lower_frame,"Employee"))
        intern_button.place(x=600,y=70)
        ######################################################
        # ================ Dept Button on manage================
        ######################################################
        department_button=CTkButton(self.center_lower_frame,text="Clients",height=100,command=lambda:mm.subclick_manage(self.center_frame,self.center_lower_frame,"Employee"))
        department_button.place(x=160,y=230)
        ######################################################
        # ================ Project Button on manage================
        ######################################################
        project_button=CTkButton(self.center_lower_frame,text="Progress",height=100,command=lambda:mm.subclick_manage(self.center_frame,self.center_lower_frame,"Employee"))
        project_button.place(x=600,y=230)
        ######################################################
        # ================ Branch Button on manage================
        ######################################################
        project_button=CTkButton(self.center_lower_frame,text="Branches",height=100,command=lambda:mm.subclick_manage(self.center_frame,self.center_lower_frame,"Employee"))
        project_button.place(x=160,y=390)
        ######################################################
        # ================ Dept Button on manage================
        ######################################################
        project_button=CTkButton(self.center_lower_frame,text="Department",height=100,command=lambda:mm.subclick_manage(self.center_frame,self.center_lower_frame,"Employee"))
        project_button.place(x=600,y=390)






    def click_view(self):
        """ Displays partial data into tree view of students, employees, departments, courses when clicked view tab
        on interface """
        ff.cleaner(self.center_frame)
        self.clf_create(self.center_frame)
        self.viewtv=CTkTabview(self.center_frame)
        self.viewtv.add("Employees")
        self.viewtv.add("Interns")
        self.viewtv.add("Clients")
        self.viewtv.add("Teams")
        self.viewtv.add("Branches")
        self.viewtv.add("Projects")
        self.viewtv.place(x=15,y=100,relwidth=0.97,height=780)
        vv.view_emp(self.viewtv.tab("Employees"))
        vv.view_int(self.viewtv.tab("Interns"))
        vv.view_cl(self.viewtv.tab("Clients"))
        vv.view_tbd(self.viewtv.tab("Teams"),"team")
        vv.view_tbd(self.viewtv.tab("Branches"),"branch")
        vv.view_tbd(self.viewtv.tab("Projects"),"project")
        # emptv = ck.CTkSegmentedButton(self.center_lower_frame)
        # emptv.configure(values=["                        Employees                         ", "                    Interns                     ", "                    Clients                     ", "                    Branches                      "])
        # emptv.set("                        Employees                         ")
        # emptv.place(x=35,y=32)
        
    def sth(self):
        # ========================================================================
        # =========================Displaying branch Information==============
        # ========================================================================


        self.branch_view_label = CTkLabel(self.center_lower_frame, text="View Branch Information ")#, bg="white", fg="#4f4e4d",font=("yu gothic ui", 13, "bold"))
        self.branch_view_label.place(x=200, y=305)

        self.view_branch_frame = Frame(self.center_lower_frame, bg="white")
        self.view_branch_frame.place(x=50, y=420, height=300, width=600)

        scroll_y_e = Scrollbar(self.view_branch_frame, orient=VERTICAL)
        scroll_x_e = Scrollbar(self.view_branch_frame, orient=HORIZONTAL)
        self.view_branch_tree = ttk.Treeview(self.view_branch_frame,
                                             columns=(
                                                 "Branch ID", "Branch NAME", "Address", "Dept Count"),
                                             xscrollcommand=scroll_x_e.set, yscrollcommand=scroll_y_e.set)
        scroll_x_e.pack(side=BOTTOM, fill=X)
        scroll_y_e.pack(side=RIGHT, fill=Y)
        scroll_x_e.config(command=self.view_branch_tree.xview)
        scroll_y_e.config(command=self.view_branch_tree.yview)

        # ==========================TreeView Heading====================
        self.view_branch_tree.heading("Branch ID", text="Branch ID")
        self.view_branch_tree.heading("Branch NAME", text="Branch NAME")
        self.view_branch_tree.heading("Address", text="Address")
        self.view_branch_tree.heading("Dept Count", text="Dept Count")
        self.view_branch_tree["show"] = "headings"

        # ==========================TreeView Column====================
        self.view_branch_tree.column("Branch ID", width=50)
        self.view_branch_tree.column("Branch NAME", width=150)
        self.view_branch_tree.column("Address", width=100)
        self.view_branch_tree.column("Dept Count", width=100)
        self.view_branch_tree.pack(fill=BOTH, expand=1)


        # ========================================================================
        # =========================Displaying instructor Information==============
        # ========================================================================
        self.intern_view_label = CTkLabel(self.center_lower_frame, text="View intern Information ")#, bg="white", fg="#4f4e4d", font=("yu gothic ui", 13, "bold"))
        self.intern_view_label.place(x=860, y=0)

        self.view_intern_frame = Frame(self.center_lower_frame, bg="white")
        self.view_intern_frame.place(x=850, y=40, height=300, width=600)


        scroll_y_e = Scrollbar(self.view_intern_frame, orient=VERTICAL)
        scroll_x_e = Scrollbar(self.view_intern_frame, orient=HORIZONTAL)
        self.view_intern_tree = ttk.Treeview(self.view_intern_frame,
                                               columns=(
                                                   "Intern ID", "Intern NAME", "DEPARTMENT", "Intern EMAIL"),
                                               xscrollcommand=scroll_x_e.set, yscrollcommand=scroll_y_e.set)
        scroll_x_e.pack(side=BOTTOM, fill=X)
        scroll_y_e.pack(side=RIGHT, fill=Y)
        scroll_x_e.config(command=self.view_intern_tree.xview)
        scroll_y_e.config(command=self.view_intern_tree.yview)

        # ==========================TreeView Heading====================
        self.view_intern_tree.heading("Intern ID", text="Intern ID")
        self.view_intern_tree.heading("Intern NAME", text="Intern NAME")
        self.view_intern_tree.heading("DEPARTMENT", text="DEPARTMENT")
        self.view_intern_tree.heading("Intern EMAIL", text="Intern EMAIL")
        self.view_intern_tree["show"] = "headings"

        # ==========================TreeView Column====================
        self.view_intern_tree.column("Intern ID", width=50)
        self.view_intern_tree.column("Intern NAME", width=150)
        self.view_intern_tree.column("Intern EMAIL", width=100)
        self.view_intern_tree.pack(fill=BOTH, expand=1)


        # ========================================================================
        # =========================Displaying Department Information==============
        # ========================================================================


        self.department_view_label = CTkLabel(self.center_lower_frame, text="View Department Information ")#, bg="white", fg="#4f4e4d",font=("yu gothic ui", 13, "bold"))
        self.department_view_label.place(x=860, y=305)

        self.view_department_frame = Frame(self.center_lower_frame, bg="white")
        self.view_department_frame.place(x=850, y=420, height=300, width=600)

        scroll_y_e = Scrollbar(self.view_department_frame, orient=VERTICAL)
        scroll_x_e = Scrollbar(self.view_department_frame, orient=HORIZONTAL)
        self.view_department_tree = ttk.Treeview(self.view_department_frame,
                                                 columns=(
                                                     "DEPARTMENT ID", "DEPARTMENT NAME", "DEPARTMENT CODE",
                                                     "EMPLOYEE COUNT"),
                                                 xscrollcommand=scroll_x_e.set, yscrollcommand=scroll_y_e.set)
        scroll_x_e.pack(side=BOTTOM, fill=X)
        scroll_y_e.pack(side=RIGHT, fill=Y)
        scroll_x_e.config(command=self.view_department_tree.xview)
        scroll_y_e.config(command=self.view_department_tree.yview)

        # ==========================TreeView Heading====================
        self.view_department_tree.heading("DEPARTMENT ID", text="DEPARTMENT ID")
        self.view_department_tree.heading("DEPARTMENT NAME", text="DEPARTMENT NAME")
        self.view_department_tree.heading("DEPARTMENT CODE", text="DEPARTMENT CODE")
        self.view_department_tree.heading("EMPLOYEE COUNT", text="EMPLOYEE COUNT")
        self.view_department_tree["show"] = "headings"

        # ==========================TreeView Column====================
        self.view_department_tree.column("DEPARTMENT ID", width=100)
        self.view_department_tree.column("DEPARTMENT NAME", width=100)
        self.view_department_tree.column("DEPARTMENT CODE", width=100)
        self.view_department_tree.column("EMPLOYEE COUNT", width=100)
        self.view_department_tree.pack(fill=BOTH, expand=1)


    # def but1(self):
        # for i in self.leftframeupper:
        #     i.destroy()
    

    def showsidebars(self,container):
    
        self.pbar1=CTkProgressBar(container, orientation='vertical',progress_color='green',height=250,width=20)
        self.pbar1.set(0.96)
        self.pbar1.place(x=75,y=40)
        self.pbar2=CTkProgressBar(container, orientation='vertical',progress_color='blue',height=250,width=20)
        self.pbar2.place(x=205,y=40)
    def clock(self, win_):
        self.wid = win_

        # ==========Clock image=============
        self.clock_label = Label(self.wid, bg="white")  # ,bd=10, relief=RAISED)
        self.clock_label.place(x=10, y=5, height=360, width=360)
        self.clock_image(1,6,18)
        self.clock_usable()

    def clock_image(self, h_, min_, sec_):
        """this will draw a new image having hight, width and it takes parameter for hour, minutes and seconds"""
        clock_img = Image.new("RGB", (360, 360), (255, 255, 255))
        draw_img = ImageDraw.Draw(clock_img)
        bg = Image.open("images\\clockNew2.png")
        # bg = bg.resize((360, 360))
        clock_img.paste(bg, (0, 0))

        center = 180, 180
        # ============= Clock hour Line===========
        draw_img.line((center, 195 + 65 * sin(radians(h_)), 195 - 70 * cos(radians(h_))), fill="white", width=4)

        # ============= Clock Minutes Line===========
        draw_img.line((center, 180 + 120 * sin(radians(min_)), 180 - 100 * cos(radians(min_))), fill="white", width=3)

        # ============= Clock Seconds Line===========
        draw_img.line((center, 180 + 125 * sin(radians(sec_)), 180 - 105 * cos(radians(sec_))), fill="white", width=2)

        # ============= Clock Eclipse===========
        draw_img.ellipse((177, 177, 183, 183), fill="orange")
        clock_img.save(
            "images\\clock_new_image.png")

    def clock_usable(self):
        """this make clock to movable by calling it recursively after every 200 ms """
        hour = datetime.now().time().hour
        minutes = datetime.now().time().minute
        seconds = datetime.now().time().second
        # print(hour, minutes, seconds)
        h_ = (hour / 12) * 360
        min_ = (minutes / 60) * 360
        sec_ = (seconds / 60) * 360
        # print(h_, min_, sec_)
        self.clock_image(h_, min_, sec_)
        try:
            self.show_img = ImageTk.PhotoImage(file="images\\clock_new_image.png")
        except:
            pass
        self.clock_label.config(image=self.show_img)
        self.clock_label.after(200, self.clock_usable)



    
    def finish(self,contt):
        contt.destroy()
        
    def cleaner(self,container):
        for  widgt in container.winfo_children():
            widgt.destroy()
    def click_setting(self):
        self.cleaner(self.center_frame)
        self.clf_create(self.center_frame)
        self.appearance_mode_label = ck.CTkLabel(self.center_lower_frame, text="Appearance Mode:", anchor="w")
        self.appearance_mode_label.place(x=100,y=60)
        self.appearance_mode_optionemenu = ck.CTkOptionMenu(self.center_lower_frame, values=["Light", "Dark", "System"], command=self.change_appearance_mode_event)
        self.appearance_mode_optionemenu.place(x=650,y=60)

        self.color_mode_label = ck.CTkLabel(self.center_lower_frame, text="Widgets Color:", anchor="w")
        self.color_mode_label.place(x=100,y=260)
        self.color_mode_optionemenu = ck.CTkOptionMenu(self.center_lower_frame, values=["blue", "green", "dark-blue"], command=self.change_color_theme_event)
        self.color_mode_optionemenu.place(x=650,y=260)

        self.scaling_label = CTkLabel(self.center_lower_frame, text="UI Scaling:", anchor="w")
        self.scaling_label.place(x=100,y=460)

        self.scaling_optionemenu = CTkOptionMenu(self.center_lower_frame, values=["80%", "90%", "100%", "110%", "120%"],
                                                               command=self.change_scaling_event)
        self.scaling_optionemenu.place(x=650,y=460)
        self.scaling_optionemenu.set(scaling_var)
    def change_scaling_event(self, new_scaling: str):
        global scaling_var
        scaling_var=new_scaling
        new_scaling_float = int(new_scaling.replace("%", "")) / 100
        ck.set_widget_scaling(new_scaling_float)
    def change_appearance_mode_event(self, new_appearance_mode: str):
        ck.set_appearance_mode(new_appearance_mode)


    def change_color_theme_event(self, new_color):
        ck.set_default_color_theme(new_color)
        restart(self.top)
        self.click_setting
def restart(a):
    a.destroy()
    main()

def main(*args):
   '''Main entry point for the application.'''
   global root
   root = ck.CTk()
   root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
   # Creates a toplevel widget.
   global _top1, w1
   _top1 = root
   wn1 = Toplevel1(_top1)
   root.mainloop()
 
if __name__ == '__main__':
    main()
def caller():
    main()

